% Linear Regression with Householder Transformation & Back Substitution
% Input£º
%   X: Feature, Matrix (m x n, m > n)
%   y: Response, Vector (n x 1)
% Output:
%   b: Solution to equation y = X * b.

% X = [5 0 9 3; 3 6 8 9; 4 4 9 6; 0 3 1 8; 2 8 2 3];
% y = [20 17 32 10 12]';

function b = multilinreg(X,y)
    [m,n] = size(X);
    X_new = X;
    y_new = y;
    for i = 1:n
        v = house(X_new(i:m, i));
        X_new(i:m, i:n) = rowhouse(X_new(i:m, i:n), v);
        y_new(i:m) = y_new(i:m) - 2/norm(v)^2 * v' * y_new(i:m) * v; 
    end
    b = backsub(X_new,y_new);
end

% Householder Transformation for a vector
% Input:
%   x: array (m x 1).
% Output:
%   v: array (m x 1). Solution to H * X = norm(X) * e1, where H is the
%   Householder matrix generated by v. (v is normalized s.t. v(1)=1.)
function v = house(x)
    m = size(x,1);
    mu = norm(x,2); % Unify the norm
    v = x;
    if mu ~= 0
        v(2:m) = v(2:m) / (v(1) + sign(v(1)) * mu);
    end
    v(1) = 1;
end

% Householder Transformation - Row Iteration
% Input:
%   X: Matrix (m x n, m > n)
%   v: householder vector array (n x 1)
% Output:
%   X_new: First-row-transformed matrix
function X_new = rowhouse(X,v)
    X_new = X - 2 / norm(v)^2 * v * v' * X;
end

% Backward Substitution
% Input: 
%   X: Upper triangular matrix (n x n).
%   y: Response array (n x 1).
% Output: 
%   b: Array (n x 1). Solution to y = X * b.
function b = backsub(X, y)
    m = size(X,1);
    n = size(X,2);
    b = zeros(n,1);
    b(n) = y(n) / X(n,n);
    for i = n-1:-1:1
        b(i) = (y(i) - sum(X(i, i+1:n) * b(i+1:n))) / X(i,i);
    end
end
